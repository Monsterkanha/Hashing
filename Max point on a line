1. Here We assume line starts with current value and calculate slope with all other and maintain a map containing frequencies wise.
-> Imp when both elements are equal deal it seperatly.
2. And calculate answer for each 
One optimization start from j = i+1 why ? 
Because we know if line with max slope include anypoint before i then this would have taken in that loop. 


int gcd(int x ,int y){
    if(x == 0) return y;
    return gcd(y%x, x);
}

int Solution::maxPoints(vector<int> &A, vector<int> &B) {
    int ans = 0;
    int n = A.size();
    map<pair<int,int> , int> M;
    for(int i = 0; i < n ; i++){
        M.clear();
        int dup = 1;
        for(int j = i +1; j <n ; j++){
            int xd = A[j] - A[i];
            int yd = B[j] - B[i];

            if(xd == 0 && yd == 0)  dup++;
            else{
                int gxy = gcd(xd, yd);
                M[{xd/gxy, yd/gxy}]++;
            }
        }
        ans = max(ans, dup);                  // In case all elements are equal. 
        for(auto x: M){
            ans = max(ans, x.second + dup);
        }
    }
    return ans;
}
