Here, we maintain a prefix xor and create a map that will contain xor for different group.

Let us call the XOR of all elements in the range [i+1, j] as x, in the range [0, i] as y, and in the range [0, j] as z.

If we do XOR of y with z, the overlapping elements in [0, i] from y and z zero out and we get XOR of all elements in the range [i+1, j], i.e. x.

Since x = y XOR z, we have y = x XOR z. Now, if we know the value of z and we take the value of x as B, we get the count of x as the count of all y satisfying this relation.

int Solution::solve(vector<int> &A, int B) {
    unordered_map<int,int> M;
    int n = A.size();
    int prev = 0, cnt = 0;
    for(int i = 0 ; i < n; i++){
        prev = prev^A[i];
        if(prev == B) cnt++;
        if(M.find(B^prev) != M.end()){
            cnt += M[B^prev];
        }
        M[prev]++;
    }
    return cnt;
}
