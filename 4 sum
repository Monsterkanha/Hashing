Here, idea is same as of 3 sum.
1st with help of set.

set<vector<int>> s;
sort(A.begin(), A.end());
int n = A.size();
for(int i = 0; i < n-3; i++){
    for(int j = i+1; j < n-2; j++){
        int target = B - A[i] - A[j], l = j+1, h = n-1, sum = 0;
        while(l < h){
            sum = A[l]+A[h];
            if(sum == target){
                vector<int> v = {A[i], A[j], A[l++], A[h--]};
                s.insert(v);
            }
            else if(sum < target) l++;
            else h--;
        }
    }
}
return vector<vector<int>>(s.begin(), s.end());


We can save time by checking duplicates on our own.

assume every ith as a and its next a j and calculate 2 sum and then increment j.

But if current is same as previous then do nothing.
Else run for 3 sum and same for 3 sum too, important on line 40, if (j > i+1) because this is the starting for it.



vector<vector<int> > Solution::fourSum(vector<int> &A, int B) {
    sort(A.begin() , A.end());
    vector<vector<int>> ans;
    int n = A.size();
    for(int i = 0 ; i < n-3; i++ ){
        if(i > 0 && A[i] == A[i-1]) continue;
        for(int j = i+1; j < n-2; j++){
            if(j > i+1 && A[j] == A[j-1]) continue;
            int low = j+1, high = n-1 , sum = B- A[i] - A[j];
            while(low < high){
                if(A[low] + A[high] == sum){
                    ans.push_back({A[i] , A[j] , A[low], A[high]});
                    while(low < high && A[low] == A[low+1]) low++;
                    while(high > low && A[high] == A[high-1]) high--;
                    low++, high--;
                }
                else if(A[low] + A[high] < sum){
                    low++;
                }
                else high--;
            }
        }
    }
    return ans;
}
